$ csharp
Mono C# Shell, type "help;" for help

Enter statements below.
csharp> using System;
csharp> using System.IO;
csharp> LoadAssembly("/Applications/SBW/lib/SBWCSharp.dll");
csharp> using SBW;
csharp> var module = new SBW.Module("edu.caltech.cellmlsbw");
csharp> var service = module.getService("cellmlsbw");

# load a simple sinusoid test model from the repository (contains imports)
csharp> var modelString = service.getMethod("string serialiseCellmlFromUrl(string)").Call("http://models.cellml.org/w/andre/sine/rawfile/293afb20feb51d1739b6645eaf2cd18b1a4f3bcb/sin_approximations_import.xml");

# load the model from the string into cellmlsbw
csharp> service.getMethod("void loadCellml(string)").Call(modelString.getString());

# simulate the model from 0 to 6, with output of 3 steps from 3 to 6
## This model provides three different methods for evaluating sine(x), so three of the columns should
## be close to identical
csharp> service.getMethod("string simulate(double,double,double,int)").Call(0.0, 3.0, 6.0, 3).getString();
"3.0000000000e+00       1.4112000806e-01	1.4112007287e-01	0.0000000000e+00	1.7215602308e-01
4.0000000000e+00	-7.5680249531e-01	-7.5680243059e-01	0.0000000000e+00	-7.9431878371e-01
5.0000000000e+00	-9.5892427466e-01	-9.5892421003e-01	0.0000000000e+00	-9.6647480679e-01
6.0000000000e+00	-2.7941549820e-01	-2.7941543342e-01	0.0000000000e+00	-3.2806136074e-01
"

# list the order of the variables
csharp> service.getMethod("string[] getVariables()").Call().get1DStringArray();
{ "main.x", "main.sin1", "main.sin2", "main.deriv_approx_initial_value", "main.sin3" }

# now check oneStep increments the output correctly
csharp> service.getMethod("void oneStep(double)").Call(0.5);
## This one should be identical to that below ##
csharp> service.getMethod("double[] getValues()").Call().get1DDoubleArray();
{ 6.5, 0.215119988087816, 0.215120052998061, 0, 0.295108913219421 }

# reset the model
csharp> service.getMethod("void reset()").Call();

# and now check the oneStep will get the same result as the simulation above
csharp> service.getMethod("void oneStep(double)").Call(1.0);

csharp> service.getMethod("void oneStep(double)").Call(1.0); 

csharp> service.getMethod("void oneStep(double)").Call(1.0); 

csharp> service.getMethod("void oneStep(double)").Call(1.0); 

csharp> service.getMethod("double[] getValues()").Call().get1DDoubleArray(); 
{ 4, -0.756802495307928, -0.756802543131392, 0, -0.794318783712337 }
csharp> service.getMethod("void oneStep(double)").Call(1.0);

csharp> service.getMethod("void oneStep(double)").Call(1.0); 

csharp> service.getMethod("void oneStep(double)").Call(0.5); 

## This one should be identical to that above ##
csharp> service.getMethod("double[] getValues()").Call().get1DDoubleArray(); 
{ 6.5, 0.215119988087816, 0.215119940267739, 0, 0.295108913219421 }

# reset the integrator and try a more complex model
csharp> service.getMethod("void reset()").Call();
# this is a full cardiac cell electrophysiology model, no imports
csharp> var modelString = service.getMethod("string serialiseCellmlFromUrl(string)").Call("http://models.cellml.org/w/andre/SAN-ORd/rawfile/a96ef0c616141b11c078a3d8bb5bd4f5550fe78d/Ohara_Rudy_2011.cellml");

# simulate the model for one cycle
csharp> service.getMethod("string simulate(double,double,double,int)").Call(0.0, 0.0, 400.0, 450).getString();
"...."
